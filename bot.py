import asyncio
import json
import aiofiles

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart

from config import BOT_TOKEN

GIFT_LINKS = {
    "–ö–æ–Ω—å–∫–∏ —Ä–æ–ª–∏–∫–æ–≤—ã–µ": "https://ozon.ru/t/DLVD8ua",
    "3-D —Ä—É—á–∫–∞": "https://ozon.ru/t/8USOqcW",
    "–ù–∞–±–æ—Ä –æ–ø—ã—Ç–æ–≤ (–º–∏–Ω–∏-—Ñ–µ—Ä–º–∞)": "https://ozon.ru/t/zDSzHm7",
    "–•–∞–ª–∞—Ç": "https://ozon.ru/t/Ash7v3j",
    "–ü–∏–∂–∞–º–∞": "https://ozon.ru/t/j9ytwSh",
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_–û–∑–æ–Ω_2": "https://ozon.ru/t/Q1CwIki",
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_–û–∑–æ–Ω_3": "https://ozon.ru/t/vIlAHMF"
}

BOOKINGS_FILE = 'storage.json'


async def load_bookings():
    async with aiofiles.open(BOOKINGS_FILE, mode='r') as f:
        content = await f.read()
        return json.loads(content)


async def save_bookings(data):
    async with aiofiles.open(BOOKINGS_FILE, mode='w') as f:
        await f.write(json.dumps(data, ensure_ascii=False, indent=2))


def user_already_chosen(user_id: int, bookings: dict) -> bool:
    return str(user_id) in bookings.get("confirmed_users", [])


async def on_start(message: Message):
    bookings = await load_bookings()

    if user_already_chosen(message.from_user.id, bookings):
        await message.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫)) –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!))")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à –ª–∏—Å—Ç", callback_data="view_list")]
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —á–∞—Ç-–±–æ—Ç —Å –≤–∏—à-–ª–∏—Å—Ç–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –ê–º–∞–ª–∏–∏. "
        "–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –≤–∏—à-–ª–∏—Å—Ç–∞ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ! "
        "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –º—ã –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã –ª—é–±–æ–º—É –ø–æ–¥–∞—Ä–∫—É üòä",
        reply_markup=kb
    )


async def on_view_list(callback: CallbackQuery):
    bookings = await load_bookings()
    if user_already_chosen(callback.from_user.id, bookings):
        await callback.message.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫)) –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!))")
        return

    buttons = []
    for gift, url in GIFT_LINKS.items():
        if bookings.get("bookings", {}).get(gift) is None:
            buttons.append([InlineKeyboardButton(text=gift, url=url)])

    buttons.append([InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="reserve")])
    buttons.append([InlineKeyboardButton(text="–ö—É–ø–ª—é –¥—Ä—É–≥–æ–π –ø–æ–¥–∞—Ä–æ–∫", callback_data="other_gift")])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


async def on_reserve(callback: CallbackQuery):
    bookings = await load_bookings()
    if user_already_chosen(callback.from_user.id, bookings):
        await callback.message.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫)) –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!))")
        return

    buttons = []
    for gift in GIFT_LINKS.keys():
        if bookings.get("bookings", {}).get(gift) is None:
            buttons.append([InlineKeyboardButton(text=gift, callback_data=f"book_{gift}")])

    if not buttons:
        await callback.message.answer("–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã üò¢")
        return

    await callback.message.answer("–ö–∞–∫–æ–π –∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?",
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


async def on_book(callback: CallbackQuery):
    gift_name = callback.data[5:]
    user_id = str(callback.from_user.id)
    full_name = callback.from_user.full_name

    bookings = await load_bookings()

    if user_already_chosen(callback.from_user.id, bookings):
        await callback.message.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫)) –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!))")
        return

    if bookings.get("bookings", {}).get(gift_name) is None:
        bookings["bookings"][gift_name] = full_name
        bookings["confirmed_users"].append(user_id)
        await save_bookings(bookings)

        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ! –ë—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ê–º–∞–ª–∏–∏ 09.08.2025 –ø–æ —É–ª. –ú. –ì–∞—Ñ—É—Ä–∏ –¥. 46, "
            "–≤ 14:00 - –≤ —Ü–µ–Ω—Ç—Ä–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π Maza Park"
        )
    else:
        await callback.message.answer("–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º üò¢")


async def on_other_gift(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    bookings = await load_bookings()

    if user_already_chosen(callback.from_user.id, bookings):
        await callback.message.answer("–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫)) –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!))")
        return

    bookings["confirmed_users"].append(user_id)
    await save_bookings(bookings)

    await callback.message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ë—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è –Ω–∞ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ê–º–∞–ª–∏–∏ 09.08.2025 –ø–æ —É–ª. –ú. –ì–∞—Ñ—É—Ä–∏ –¥. 46, "
        "–≤ 14:00 - –≤ —Ü–µ–Ω—Ç—Ä–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π Maza Park"
    )


async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.message.register(on_start, CommandStart())
    dp.callback_query.register(on_view_list, F.data == "view_list")
    dp.callback_query.register(on_reserve, F.data == "reserve")
    dp.callback_query.register(on_other_gift, F.data == "other_gift")
    dp.callback_query.register(on_book, F.data.startswith("book_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
